---
import offices from './officesData'
---

<div class="offices-component">
  <h2>Пункты приёма документов</h2>
  <div class="offices-container">
    <div class="select-container">
      <select id="office-select">
        <optgroup label="Саратов">
          {offices.map((i) => <option value={i.id}> {i.name} </option>)}
        </optgroup>
      </select>
      <span class="select-arrow"></span>
    </div>
    {
      () => {
        const i = offices[0]

        return (
          <div id="default-office" class="office-info visible">
            <a href={i.phoneUrl}>{i.phone}</a>
            <p>{i.address}</p>
            <pre>{i.working}</pre>
          </div>
        )
      }
    }
    {
      offices.map((i) => (
        <div id={i.id} class="office-info hidden">
          <a href={i.phoneUrl}>{i.phone}</a>
          <p>{i.address}</p>
          <pre>{i.working}</pre>
        </div>
      ))
    }
  </div>
</div>

<script>
  ;(document.getElementById('office-select') as HTMLSelectElement).addEventListener('change', () => {
    // Написать, чтобы исполнялось при наличии 'default-office'
    // Если 'default-office' нету, то выдаёт ошибку
    ;(document.getElementById('default-office') as HTMLDivElement).remove()
    console.log('defaultOffice is delete')

    const select = document.getElementById('office-select') as HTMLSelectElement
    const value: string = select.value

    ;(document.querySelectorAll('.office-info') as NodeListOf<HTMLDivElement>).forEach((elem: HTMLDivElement): void => {
      const isChoise: boolean = elem.id === value

      const refreshVisible = () => {
        console.log(isChoise)
        if (isChoise) {
          console.log('in ifChoise true')
          elem.classList.remove(...elem.classList)
          elem.classList.add('office-info', 'visible')
        } else {
          console.log('in ifChoise false')
          elem.classList.remove(...elem.classList)
          elem.classList.add('office-info', 'hidden')
        }
      }

      refreshVisible()
    })
  })
</script>

<style>
  .offices-component h2 {
    font-size: 0.9rem;
  }

  .offices-container {
    display: flex;
    flex-flow: row nowrap;
    justify-content: space-between;
    align-items: center;
  }

  .select-container {
    position: relative;
    border-right: 1px solid black;
    padding: 0.5rem 1rem 0.5 0;
  }

  select {
    padding: 0 1rem 0 0;
    background-color: transparent;
    border: 0;
    font-size: 0.9rem;
  }

  .select-arrow {
    display: block;
    position: absolute;
    top: 0;
    right: 0;
    width: 1rem;
    height: 1rem;
    background-color: blue;
  }

  /* .select-arrow::after {
     z-index: 1;
    --size: 1rem;
    content'';
    border-left: var(--size) solid transparent;
    border-right: var(--size) solid transparent;
    border-bottom: var(--size) solid violet;
    position: absolute;
    top: 1rem;
    right: 1rem;
    width: 1rem;
    height: 1rem; 
  } */

  .hidden {
    display: none;
  }

  .visible {
    display: flex;
    padding: 0 1rem;
    font-size: 0.8rem;
  }
</style>
